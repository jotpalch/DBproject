select substr(發生地點,4,3) as 行政區,count(*) as 案件數量 from 臺北市機車竊盜點位資訊
where substr(臺北市機車竊盜點位資訊.發生日期,4,2) like '01'
group by 行政區
order by 案件數量 desc
limit 5;

ScooterStole.find_by_sql("select substr(location,4,3) as d,count(*) as n from scooter_stoles
where substr(scooter_stoles.date,4,2) like '01'
group by d
order by n desc
limit 5")

ScooterStole.select("substr(location,4,3) as d,count(*) as n").group("substr(location,4,3)")


@chart = []
@name = ["腳踏車失竊案件數量","汽車失竊案件數量","機車失竊案件數量","住宅失竊案件數量"]
tmp = Hash.new
BikeStole.where("date LIKE '#{date_search}%'").select("substr(location,4,3) as d,count(*) as n").group("d").order("d desc").each do |s|
  tmp[s.d] = s.n
end
@chart << tmp
tmp = Hash.new
CarStole.where("date LIKE '#{date_search}%'").select("substr(location,4,3)  as d,count(*) as n").group("d").order("d desc").each do |s|
  tmp[s.d] = s.n
end
@chart << tmp
tmp = Hash.new
ScooterStole.where("date LIKE '#{date_search}%'").select("substr(location,4,3)  as d,count(*) as n").group("d").order("d desc").each do |s|
  tmp[s.d] = s.n
end
@chart << tmp
tmp = Hash.new
HomeStole.where("date LIKE '#{date_search}%'").select("substr(location,4,3)  as d,count(*) as n").group("d").order("d desc").each do |s|
  tmp[s.d] = s.n
end

if params[:month]!="整年"
  params[:month] = "_"+format("%02d",params[:month]).to_s
  date_search = (params[:year].to_i-1911).to_s+params[:month][1..2]
else
  date_search = (params[:year].to_i-1911).to_s
end

t = []
["萬華區","松山區","文山區","大安區","大同區","士林區","南港區","北投區","內湖區","信義區","中正區","中山區"].each do |dis|
  tmp = [0]
  104.upto(110) do |y|
    1.upto(12) do |m|
      break if (y==110&&m==5)
      date_search = y.to_s+format("%02d",m).to_s

      count = BikeStole.where("date LIKE '#{date_search}%'").where("location LIKE '%#{dis}%'").count
            + ScooterStole.where("date LIKE '#{date_search}%'").where("location LIKE '%#{dis}%'").count
            + HomeStole.where("date LIKE '#{date_search}%'").where("location LIKE '%#{dis}%'").count
            + CarStole.where("date LIKE '#{date_search}%'").where("location LIKE '%#{dis}%'").count

      tmp << count+tmp[-1]

    end
  end
  t << tmp
end
t.each do |d|
  print(d)
  puts()
end


104.upto(110) do |y|
  1.upto(12) do |m|
    break if (y==110&&m==5)
    date_search = y.to_s+format("%02d",m).to_s
    print(date_search,",")
  end
end

10401	10402	10403	10404	10405	10406	10407	10408	10409	10410	10411	10412	10501	10502	10503	10504	10505	10506	10507	10508	10509	10510	10511	10512	10601	10602	10603	10604	10605	10606	10607	10608	10609	10610	10611	10612	10701	10702	10703	10704	10705	10706	10707	10708	10709	10710	10711	10712	10801	10802	10803	10804	10805	10806	10807	10808	10809	10810	10811	10812	10901	10902	10903	10904	10905	10906	10907	10908	10909	10910	10911	10912	11001	11002	11003	11004

BikeStole.select("substr(location,4,3) as d,count(*) as n").group("d").order("d desc").each do |s|
  print("\"",s.d,"\",")
end


123	123
123	123

0	7	8	9	10	12	12	13	14	15	18	20	21	23	26	30	33	36	39	40	44	45	47	50	52	52	56	57	58	58	61	65	68	69	70	72	74	76	77	79	80	82	86	91	92	92	94	98	100	104	108	109	112	115	118	121	122	125	129	130	135	135	135	137	142	144	148	150	154	156	157	161	161	162	165	166	166
0	4	6	8	8	10	11	14	14	16	16	16	17	19	20	21	22	24	29	33	34	36	37	38	45	45	46	46	47	50	51	54	56	59	62	63	65	66	69	71	71	72	74	74	75	77	77	77	78	78	79	81	84	86	87	88	91	92	93	96	99	100	103	103	103	103	105	107	112	112	112	116	121	124	125	125	125
0	1	4	5	9	14	16	19	21	23	25	25	29	29	31	33	34	35	37	41	47	49	56	65	69	73	80	82	82	84	87	92	96	101	103	104	108	110	111	112	112	112	112	112	114	116	117	117	119	120	121	124	124	126	131	134	135	138	143	144	145	146	147	147	150	155	157	158	160	160	160	162	162	164	165	167	168
0	5	9	19	26	30	37	40	45	50	55	59	60	63	66	70	75	81	93	97	106	112	119	129	133	141	148	152	160	162	169	176	185	191	196	200	209	210	213	215	219	229	232	235	242	250	255	264	268	271	275	281	289	296	302	309	314	319	326	331	334	343	345	349	354	360	366	370	373	373	375	380	385	393	400	408	418
0	0	1	1	5	7	10	11	13	19	26	31	35	35	37	42	44	47	48	49	51	53	55	58	60	62	62	66	66	69	71	73	75	78	79	80	84	89	90	92	101	104	105	106	107	110	110	111	112	114	115	116	119	122	126	129	135	140	144	148	149	151	153	154	157	159	163	163	167	170	171	175	177	181	184	186	187
0	0	1	2	3	7	8	9	13	20	23	23	23	25	26	28	29	32	34	34	35	35	39	41	41	43	43	45	46	48	49	50	51	51	51	53	57	57	57	57	58	62	64	65	65	66	68	69	73	74	74	74	74	77	78	81	82	84	87	87	90	93	95	95	98	99	101	104	109	112	113	120	123	125	126	128	129
0	9	10	14	15	15	19	21	25	25	27	28	29	30	30	31	33	35	36	36	41	41	42	43	44	44	46	49	50	53	55	56	59	62	63	64	64	64	64	65	66	69	69	69	72	72	75	76	76	76	77	78	79	81	84	85	87	89	92	94	96	98	101	103	106	106	107	110	110	110	110	110	110	110	110	113	115
0	8	12	13	15	16	23	28	34	36	37	41	46	49	50	51	58	64	65	67	67	72	80	84	84	87	87	89	91	95	101	105	109	111	114	117	118	119	119	121	121	124	127	129	130	133	136	138	140	143	143	144	145	149	153	155	159	162	164	165	167	171	173	175	177	180	184	186	188	190	190	191	191	195	198	200	200
0	4	5	5	6	7	9	9	11	13	15	18	20	20	22	27	29	31	35	37	38	39	41	42	42	44	44	45	46	48	50	50	54	54	54	55	55	57	57	59	64	68	71	72	73	74	74	74	78	79	79	82	82	83	84	85	88	90	94	94	95	95	97	97	100	100	101	101	102	102	102	102	103	103	104	105	106
0	4	8	9	10	13	17	19	24	26	27	32	34	35	35	40	40	41	44	52	52	55	60	64	71	73	76	77	79	81	85	88	93	101	104	105	108	112	114	122	127	129	130	132	132	134	136	138	141	145	146	148	151	153	155	165	172	177	178	181	186	190	192	194	194	194	197	200	204	207	207	209	209	212	213	214	218
0	3	3	6	6	12	14	17	19	26	32	36	39	39	41	44	46	55	55	56	58	62	65	68	68	69	74	75	76	82	82	87	90	99	104	107	110	112	115	117	119	122	126	129	132	134	138	143	143	145	146	147	149	153	155	157	160	161	163	164	167	168	171	172	174	174	177	180	186	190	191	195	196	198	200	205	207
0	1	2	3	5	6	9	13	14	17	20	21	28	28	31	34	35	37	38	41	44	44	44	44	46	50	52	52	54	55	57	61	61	62	65	68	68	68	70	72	74	83	85	87	88	90	98	101	103	104	105	107	108	110	111	112	114	117	119	120	123	124	127	129	129	130	132	132	135	137	137	139	139	142	143	145	145
