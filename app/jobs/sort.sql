select substr(發生地點,4,3) as 行政區,count(*) as 案件數量 from 臺北市機車竊盜點位資訊
where substr(臺北市機車竊盜點位資訊.發生日期,4,2) like '01'
group by 行政區
order by 案件數量 desc
limit 5;

ScooterStole.find_by_sql("select substr(location,4,3) as d,count(*) as n from scooter_stoles
where substr(scooter_stoles.date,4,2) like '01'
group by d
order by n desc
limit 5")

ScooterStole.select("substr(location,4,3) as d,count(*) as n").group("substr(location,4,3)")


@chart = []
@name = ["腳踏車失竊案件數量","汽車失竊案件數量","機車失竊案件數量","住宅失竊案件數量"]
tmp = Hash.new
BikeStole.where("date LIKE '#{date_search}%'").select("substr(location,4,3) as d,count(*) as n").group("d").order("d desc").each do |s|
  tmp[s.d] = s.n
end
@chart << tmp
tmp = Hash.new
CarStole.where("date LIKE '#{date_search}%'").select("substr(location,4,3)  as d,count(*) as n").group("d").order("d desc").each do |s|
  tmp[s.d] = s.n
end
@chart << tmp
tmp = Hash.new
ScooterStole.where("date LIKE '#{date_search}%'").select("substr(location,4,3)  as d,count(*) as n").group("d").order("d desc").each do |s|
  tmp[s.d] = s.n
end
@chart << tmp
tmp = Hash.new
HomeStole.where("date LIKE '#{date_search}%'").select("substr(location,4,3)  as d,count(*) as n").group("d").order("d desc").each do |s|
  tmp[s.d] = s.n
end

if params[:month]!="整年"
  params[:month] = "_"+format("%02d",params[:month]).to_s
  date_search = (params[:year].to_i-1911).to_s+params[:month][1..2]
else
  date_search = (params[:year].to_i-1911).to_s
end

t = []
["萬華區","松山區","文山區","大安區","大同區","士林區","南港區","北投區","內湖區","信義區","中正區","中山區"].each do |dis|
  tmp = [0]
  104.upto(110) do |y|
    1.upto(12) do |m|
      break if (y==110&&m==5)
      date_search = y.to_s+format("%02d",m).to_s

      count = BikeStole.where("date LIKE '#{date_search}%'").where("location LIKE '%#{dis}%'").count
      count += ScooterStole.where("date LIKE '#{date_search}%'").where("location LIKE '%#{dis}%'").count
      count += HomeStole.where("date LIKE '#{date_search}%'").where("location LIKE '%#{dis}%'").count
      count += CarStole.where("date LIKE '#{date_search}%'").where("location LIKE '%#{dis}%'").count

      tmp << count+tmp[-1]

    end
  end
  t << tmp
end
t.each do |d|
  print(d)
  puts()
end


104.upto(110) do |y|
  1.upto(12) do |m|
    break if (y==110&&m==5)
    date_search = y.to_s+format("%02d",m).to_s
    print(date_search,",")
  end
end

10401	10402	10403	10404	10405	10406	10407	10408	10409	10410	10411	10412	10501	10502	10503	10504	10505	10506	10507	10508	10509	10510	10511	10512	10601	10602	10603	10604	10605	10606	10607	10608	10609	10610	10611	10612	10701	10702	10703	10704	10705	10706	10707	10708	10709	10710	10711	10712	10801	10802	10803	10804	10805	10806	10807	10808	10809	10810	10811	10812	10901	10902	10903	10904	10905	10906	10907	10908	10909	10910	10911	10912	11001	11002	11003	11004

BikeStole.select("substr(location,4,3) as d,count(*) as n").group("d").order("d desc").each do |s|
  print("\"",s.d,"\",")
end


123	123
123	123

0	7	8	9	10	12	12	13	14	15	18	20	21	23	26	30	33	36	39	40	44	45	47	50	52	52	56	57	58	58	61	65	68	69	70	72	74	76	77	79	80	82	86	91	92	92	94	98	100	104	108	109	112	115	118	121	122	125	129	130	135	135	135	137	142	144	148	150	154	156	157	161	161	162	165	166	166
0	4	6	8	8	10	11	14	14	16	16	16	17	19	20	21	22	24	29	33	34	36	37	38	45	45	46	46	47	50	51	54	56	59	62	63	65	66	69	71	71	72	74	74	75	77	77	77	78	78	79	81	84	86	87	88	91	92	93	96	99	100	103	103	103	103	105	107	112	112	112	116	121	124	125	125	125
0	1	4	5	9	14	16	19	21	23	25	25	29	29	31	33	34	35	37	41	47	49	56	65	69	73	80	82	82	84	87	92	96	101	103	104	108	110	111	112	112	112	112	112	114	116	117	117	119	120	121	124	124	126	131	134	135	138	143	144	145	146	147	147	150	155	157	158	160	160	160	162	162	164	165	167	168
0	5	9	19	26	30	37	40	45	50	55	59	60	63	66	70	75	81	93	97	106	112	119	129	133	141	148	152	160	162	169	176	185	191	196	200	209	210	213	215	219	229	232	235	242	250	255	264	268	271	275	281	289	296	302	309	314	319	326	331	334	343	345	349	354	360	366	370	373	373	375	380	385	393	400	408	418
0	0	1	1	5	7	10	11	13	19	26	31	35	35	37	42	44	47	48	49	51	53	55	58	60	62	62	66	66	69	71	73	75	78	79	80	84	89	90	92	101	104	105	106	107	110	110	111	112	114	115	116	119	122	126	129	135	140	144	148	149	151	153	154	157	159	163	163	167	170	171	175	177	181	184	186	187
0	0	1	2	3	7	8	9	13	20	23	23	23	25	26	28	29	32	34	34	35	35	39	41	41	43	43	45	46	48	49	50	51	51	51	53	57	57	57	57	58	62	64	65	65	66	68	69	73	74	74	74	74	77	78	81	82	84	87	87	90	93	95	95	98	99	101	104	109	112	113	120	123	125	126	128	129
0	9	10	14	15	15	19	21	25	25	27	28	29	30	30	31	33	35	36	36	41	41	42	43	44	44	46	49	50	53	55	56	59	62	63	64	64	64	64	65	66	69	69	69	72	72	75	76	76	76	77	78	79	81	84	85	87	89	92	94	96	98	101	103	106	106	107	110	110	110	110	110	110	110	110	113	115
0	8	12	13	15	16	23	28	34	36	37	41	46	49	50	51	58	64	65	67	67	72	80	84	84	87	87	89	91	95	101	105	109	111	114	117	118	119	119	121	121	124	127	129	130	133	136	138	140	143	143	144	145	149	153	155	159	162	164	165	167	171	173	175	177	180	184	186	188	190	190	191	191	195	198	200	200
0	4	5	5	6	7	9	9	11	13	15	18	20	20	22	27	29	31	35	37	38	39	41	42	42	44	44	45	46	48	50	50	54	54	54	55	55	57	57	59	64	68	71	72	73	74	74	74	78	79	79	82	82	83	84	85	88	90	94	94	95	95	97	97	100	100	101	101	102	102	102	102	103	103	104	105	106
0	4	8	9	10	13	17	19	24	26	27	32	34	35	35	40	40	41	44	52	52	55	60	64	71	73	76	77	79	81	85	88	93	101	104	105	108	112	114	122	127	129	130	132	132	134	136	138	141	145	146	148	151	153	155	165	172	177	178	181	186	190	192	194	194	194	197	200	204	207	207	209	209	212	213	214	218
0	3	3	6	6	12	14	17	19	26	32	36	39	39	41	44	46	55	55	56	58	62	65	68	68	69	74	75	76	82	82	87	90	99	104	107	110	112	115	117	119	122	126	129	132	134	138	143	143	145	146	147	149	153	155	157	160	161	163	164	167	168	171	172	174	174	177	180	186	190	191	195	196	198	200	205	207
0	1	2	3	5	6	9	13	14	17	20	21	28	28	31	34	35	37	38	41	44	44	44	44	46	50	52	52	54	55	57	61	61	62	65	68	68	68	70	72	74	83	85	87	88	90	98	101	103	104	105	107	108	110	111	112	114	117	119	120	123	124	127	129	129	130	132	132	135	137	137	139	139	142	143	145	145


0	20	27	40	50	55	57	69	74	83	95	98	109	113	123	134	147	157	165	174	185	190	199	207	215	220	229	237	242	248	254	260	264	274	281	284	294	304	312	322	327	333	341	354	365	372	384	400	414	434	445	455	462	467	477	493	505	514	524	532	541	545	554	565	575	588	597	603	616	624	627	636	638	643	648	650	653
0	13	21	31	38	49	53	67	69	77	81	85	93	102	108	113	118	121	128	136	139	145	152	162	171	174	177	185	188	193	196	202	208	213	220	226	228	230	235	239	240	247	257	259	266	273	278	280	287	291	293	295	302	305	307	311	317	319	320	324	327	332	336	342	345	348	350	353	361	361	362	368	376	379	381	381	381
0	13	20	28	38	50	57	63	71	74	79	83	89	95	99	103	108	112	120	127	137	143	155	171	179	188	200	203	209	214	219	225	233	239	242	248	255	261	265	272	276	283	285	290	296	300	308	310	314	316	320	324	326	330	338	346	351	361	373	378	380	386	390	392	396	403	407	410	413	414	414	416	416	419	423	425	428
0	10	19	32	39	45	54	58	70	80	87	94	104	114	122	131	141	155	174	180	194	207	221	235	248	259	270	280	293	299	311	322	339	350	359	369	381	384	392	405	415	429	440	455	479	493	503	520	533	542	549	559	573	584	593	609	619	629	644	654	664	677	685	696	703	712	721	730	736	739	741	748	753	761	770	781	791
0	3	6	7	16	22	25	28	35	44	55	62	71	74	78	87	95	103	106	112	115	118	122	127	131	133	136	144	150	158	166	171	176	181	182	186	193	201	206	211	224	232	236	241	249	257	265	273	281	292	294	297	301	308	322	329	339	347	352	358	364	368	374	381	386	389	393	395	402	408	410	418	421	429	437	443	446
0	3	13	19	25	34	40	45	59	70	78	86	96	110	118	129	135	141	154	162	178	183	195	204	211	222	224	234	243	252	264	277	287	292	300	310	316	322	324	329	335	344	348	351	356	367	374	384	402	407	411	418	422	431	439	453	458	463	472	477	489	492	507	518	532	538	545	551	559	565	566	576	583	589	593	597	600
0	14	18	28	35	37	43	47	55	57	61	66	68	72	76	78	83	89	94	97	108	114	119	122	123	127	130	133	137	144	150	154	159	167	178	183	186	186	189	199	206	214	219	225	231	232	237	242	245	249	256	258	259	265	272	280	286	289	293	301	305	315	318	323	326	328	333	338	338	339	340	343	344	344	346	349	353
0	10	23	31	41	49	62	71	86	96	99	105	121	134	139	145	161	171	180	193	204	216	230	242	254	265	271	279	288	298	311	320	329	335	341	354	357	364	371	379	389	395	411	420	429	439	449	457	469	481	489	499	505	517	529	541	550	557	561	563	569	582	592	603	607	615	622	627	631	638	639	642	644	650	656	665	665
0	8	18	23	38	46	49	51	56	60	65	74	85	98	103	114	123	128	138	144	153	163	172	181	188	192	200	206	214	222	228	235	245	246	253	257	262	270	273	280	286	295	303	309	314	318	326	330	341	350	354	360	363	365	371	376	384	389	394	397	401	405	409	413	419	423	427	436	440	443	444	445	446	448	452	454	455
0	12	25	27	30	43	51	58	69	74	84	93	100	105	107	113	117	118	122	134	140	150	162	170	179	186	189	193	196	203	214	221	227	239	247	249	257	264	267	278	288	298	302	309	316	322	330	339	346	355	360	363	368	374	383	398	415	421	424	429	437	444	449	457	460	463	469	474	478	483	483	488	488	495	499	500	505
0	9	14	21	22	31	39	46	52	66	85	93	103	107	114	121	131	142	145	149	154	159	166	174	178	182	190	194	199	215	218	226	232	244	254	261	269	276	286	292	296	307	316	324	332	337	344	353	359	368	370	374	377	382	390	401	409	412	419	422	429	435	442	453	459	461	466	472	481	486	488	493	499	504	508	514	516
0	12	19	25	37	44	64	78	90	104	114	122	137	146	158	171	178	186	190	202	213	216	226	232	239	254	268	275	284	297	305	312	314	320	325	332	336	344	351	357	365	380	390	403	418	428	449	462	472	480	487	498	506	516	521	528	538	542	552	560	565	569	574	579	583	589	595	601	609	612	614	620	620	624	626	631	631
